version: '3.8'

services:
  # Unstable External API (already provided)
  weakapp:
    build:
      context: ./WeakApp
      dockerfile: Dockerfile
    container_name: weakapp-api
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - microservices-network

  # RabbitMQ message queue (for Data Ingestor)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database - PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Data Ingestor Service (Go)
  data-ingestor:
    build:
      context: ./DataIngestor
      dockerfile: Dockerfile
    container_name: data-ingestor
    ports:
      - "8080:8080"
    environment:
      - CONFIG_PATH=/root/config.yaml
    volumes:
      - ./DataIngestor/config.yaml:/root/config.yaml:ro
    depends_on:
      - rabbitmq
      - weakapp
    networks:
      - microservices-network
    restart: unless-stopped

  # Data Processor Service (Rust)
  data-processor:
    build:
      context: ./data-processor-service
      dockerfile: Dockerfile
    container_name: data-processor
    ports:
      - "8082:8082"
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/microservices_db
    volumes:
      - ./data-processor-service/config.yaml:/app/config.yaml:ro
    depends_on:
      - postgres
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # GraphQL API Gateway (.NET)
  graphql-gateway:
    build:
      context: ./GraphQLGateway
      dockerfile: GraphQLGateway/Dockerfile
    container_name: graphql-gateway
    ports:
      - "5000:8080"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/microservices_db
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
    depends_on:
      - postgres
      - data-processor
    networks:
      - microservices-network

  # Notification Service (Rust) - DISABLED: No Dockerfile found
  # notification-service:
  #   build:
  #     context: ./notification-service
  #     dockerfile: Dockerfile
  #   container_name: notification-service
  #   ports:
  #     - "3003:3003"
  #   environment:
  #     - KAFKA_BROKER=kafka:9092
  #     - DATABASE_URL=postgres://postgres:postgres@postgres:5432/microservices_db
  #   depends_on:
  #     - kafka
  #     - postgres
  #   networks:
  #     - microservices-network

  # React Frontend - DISABLED: No Dockerfile found
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - REACT_APP_GRAPHQL_URL=http://localhost:5000/graphql
  #     - REACT_APP_WS_URL=ws://localhost:3003/ws
  #   depends_on:
  #     - graphql-gateway
  #     - notification-service
  #   networks:
  #     - microservices-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-network

volumes:
  postgres_data:
  grafana_data:
  rabbitmq_data:

networks:
  microservices-network:
    driver: bridge
