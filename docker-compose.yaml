version: '3.8'

services:
  # Unstable External API (already provided)
  weakapp:
    build:
      context: ./WeakApp
      dockerfile: Dockerfile
    container_name: weakapp-api
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - microservices-network

  # Message Queue - Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - microservices-network

  # Database - PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Data Ingestor Service (Node.js)
  data-ingestor:
    build:
      context: ./data-ingestor-service
      dockerfile: Dockerfile
    container_name: data-ingestor
    ports:
      - "3001:3001"
    environment:
      - KAFKA_BROKER=kafka:9092
      - WEAKAPP_API_URL=http://weakapp:8080
    depends_on:
      - kafka
      - weakapp
    networks:
      - microservices-network

  # Data Processor Service (Go)
  data-processor:
    build:
      context: ./data-processor-service
      dockerfile: Dockerfile
    container_name: data-processor
    ports:
      - "3002:3002"
    environment:
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/microservices_db
    depends_on:
      - kafka
      - postgres
    networks:
      - microservices-network

  # GraphQL API Gateway (.NET)
  graphql-gateway:
    build:
      context: ./graphql-api-gateway
      dockerfile: Dockerfile
    container_name: graphql-gateway
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/microservices_db
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - postgres
    networks:
      - microservices-network

  # Notification Service (Rust)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "3003:3003"
    environment:
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/microservices_db
    depends_on:
      - kafka
      - postgres
    networks:
      - microservices-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_GRAPHQL_URL=http://localhost:5000/graphql
      - REACT_APP_WS_URL=ws://localhost:3003/ws
    depends_on:
      - graphql-gateway
      - notification-service
    networks:
      - microservices-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-network

volumes:
  postgres_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge
